package:
  name: go-fips-1.21
  version: 1.21.13
  epoch: 0
  description: "the Go programming language with OpenSSL cryptography"
  copyright:
    - license: BSD-3-Clause
  dependencies:
    provides:
      - go-fips=${{package.full-version}}
    runtime:
      - "!go-1.21"
      - bash
      - binutils-gold # Needed for cgo linking due to upstream issue #15696 which forces use of the gold linker.
      - build-base
      - openssl-dev # Needed for building against cryptographic packages.

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates-bundle
      # We always use the equivalent non-FIPS branch of Go to build this.
      - go~1.21
      - openssl-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/golang/go
      tag: go${{package.version}}
      expected-commit: 8bba868de983dd7bf55fcd121495ba8d6e2734e7

  - pipeline:
      - uses: patch
        with:
          patches: /home/build/000-initial-setup.patch
      - uses: patch
        with:
          patches: /home/build/001-initial-openssl-for-fips.patch
      - uses: patch
        with:
          patches: /home/build/0003-openssl-fips-unconditionally-use-openssl-backend.patch
      - uses: patch
        with:
          patches: /home/build/0004-boring-always-enable-access-to-boring.Enabled-functi.patch
      - uses: patch
        with:
          patches: /home/build/cmd-go-always-emit-ldflags-version-information.patch

  - runs: |
      cd src
      ./make.bash -v

  - runs: |
      mkdir -p "${{targets.destdir}}"/usr/bin "${{targets.destdir}}"/usr/lib/go/bin "${{targets.destdir}}"/usr/share/doc/go

      for bin in go gofmt; do
        install -Dm755 bin/$bin "${{targets.destdir}}"/usr/lib/go/bin/$bin
        ln -s /usr/lib/go/bin/$bin "${{targets.destdir}}"/usr/bin/
      done

      cp -a pkg lib "${{targets.destdir}}"/usr/lib/go/
      cp -r doc misc "${{targets.destdir}}"/usr/share/doc/go
      cp -a src "${{targets.destdir}}"/usr/lib/go/
      cp -p go.env "${{targets.destdir}}"/usr/lib/go/go.env

      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/obj
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/*/cmd
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/api
      rm -rf "${{targets.destdir}}"/usr/lib/go/pkg/tool/*/go_bootstrap
      rm -rf "${{targets.destdir}}"/usr/lib/go/src/cmd/dist/dist

      # Remove tests from /usr/lib/go/src, not needed at runtime
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*_test.go" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type d -a -name "testdata" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.rc" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.bat" \) \
        -exec rm -rf \{\} \+
      find "${{targets.destdir}}"/usr/lib/go/src \( -type f -a -name "*.pem" \) \
        -exec rm -rf \{\} \+

  - uses: strip

subpackages:
  - name: "go-fips-1.21-doc"
    description: "go documentation"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share
          mv "${{targets.destdir}}"/usr/share/doc "${{targets.subpkgdir}}"/usr/share/

update:
  enabled: true
  shared: true
  github:
    identifier: golang/go
    strip-prefix: go
    tag-filter: go1.21
    use-tag: true

test:
  environment:
    contents:
      packages:
        - build-base
        - openssl-dev
  pipeline:
    - name: Test Go installation
      runs: |
        # Write a simple "Hello World" Go program
        cat <<EOF > hello.go
        package main
        import "fmt"
        func main() {
            fmt.Println("Hello World")
        }
        EOF

        # Format the Go program
        go fmt hello.go

        # Run the Go program and check the output
        go run hello.go | grep "Hello World"
    - name: Test Go cross-compilation
      runs: |
        # Build the Go program for a different OS/architecture
        GOOS=freebsd GOARCH=amd64 go build hello.go
    - name: Test Go with cgo
      runs: |
        # Write a Go program that uses cgo
        cat <<EOF > hello_cgo.go
        package main
        /*
        #include <stdlib.h>
        #include <stdio.h>
        void hello() {
            printf("%s\\n", "Hello from cgo!");
            fflush(stdout);
        }
        */
        import "C"
        func main() {
            C.hello()
        }
        EOF

        # Run the Go program with cgo and check the output
        go run hello_cgo.go | grep "Hello from cgo!"
